<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--配置业务层实现类-->
    <bean id="accountService" class="com.gyy.service.impl.AccountServiceImpl"></bean>

    <!--spring的基于XML的AOP配置步骤
      1.把通知Bean也交给spring来管理
      2.使用aop:config标签表明aop:config的配置
      3.在aop:config里用aop:aspect标签表示切面配置
           id是给切面表示唯一标识
           ref指定通知类的id
      4.在切面配置标签里使用对应的标签指明通知类型
           aop:before 表示配置前置通知
                method属性：用于指定Logger类里哪个方法是前置通知
                pointcut: 切点表达式-指的是业务层中的哪些方法被增强
         切点表达式的写法：
            关键字：execution
            表达式：
                访问修饰符 返回值 包名.包名.包名...类名.方法名（参数列表）
             标准表达式:
             public void com.gyy.service.impl.AccountServiceImpl.saveAccount()
             全通配写法：
             * *..*.*(..)
             修饰符可以省略
             *..表示当前包及子包
             *.*类名及方法名
             (..)表示任意参数类型或者有无参数
    -->
    <!--配置Logger类即通知类-->
    <bean id="logger" class="com.gyy.utils.Logger"></bean>

    <!--配置AOP-->
    <aop:config>
        <!--配置通用切入点表达式 放在外面则相当于全局能用，放在aspect里则只能当前切面能用 （因为约束只能放在切面配置之上，否则会报错）-->
        <aop:pointcut id="pt" expression="execution(* com.gyy.service.impl.*.*(..))"></aop:pointcut>
        <!-- 切面配置-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--前置通知-->
            <aop:before method="beforeLog" pointcut-ref="pt"></aop:before>
            <!--后置通知 后置和异常只会出现一个-->
            <aop:after-returning method="afterReturnLog" pointcut-ref="pt"></aop:after-returning>
            <!--异常通知 后置和异常只会出现一个-->
            <aop:after-throwing method="afterThrowLog" pointcut-ref="pt"></aop:after-throwing>
            <!--最终通知-->
            <aop:after method="afterLog" pointcut-ref="pt"></aop:after>
            <!--环绕通知-->
            <aop:around method="aroundLog" pointcut-ref="pt"></aop:around>
        </aop:aspect>
    </aop:config>
</beans>